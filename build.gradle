buildscript {

    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://plugins.gradle.org/m2/'}
        mavenCentral()
        maven {
			url = 'https://repo.spongepowered.org/repository/maven-public/'
			content { includeGroup "org.spongepowered" }
		}
		maven { url 'https://maven.parchmentmc.org' }
		mavenLocal()
    }
    dependencies {
        //classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		//classpath "com.diffplug.gradle:goomph:3.33.0"
        //classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
		//classpath "org.parchmentmc:librarian:${librarian_version}"
    }
}

plugins {
    //id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'net.neoforged.gradle.userdev' version "$neogradle_version"
}

//apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'eclipse'
//apply plugin: 'maven-publish'
//apply plugin: 'org.parchmentmc.librarian.forgegradle'
//apply plugin: 'org.spongepowered.mixin'
//apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
    }
}

group = "com.zach2039.oldguns" 
archivesBaseName = "oldguns"
version = buildVersionString()

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

runs {
    client {
        workingDirectory project.file('run')

        //property 'neoforge.logging.markers', 'REGISTRIES'
        //property 'neoforge.logging.console.level', 'debug'

        //property 'mixin.env.remapRefMap', 'true'
        //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        //arg "-mixin.config=oldguns.mixins.json"
        modSource sourceSets.main

//        mods {
//            oldguns {
//                source sourceSets.main
//            }
//        }
    }

    server {
        workingDirectory project.file('run')

        //property 'neoforge.logging.markers', 'REGISTRIES'
        //property 'neoforge.logging.console.level', 'debug'

        //property 'mixin.env.remapRefMap', 'true'
        //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        programArguments.add '-nogui'
        //arg "-mixin.config=oldguns.mixins.json"

        modSource sourceSets.main

//        mods {
//            oldguns {
//                source sourceSets.main
//            }
//        }
    }

    data {
        workingDirectory project.file('run')

        //property 'neoforge.logging.markers', 'REGISTRIES'
        //property 'neoforge.logging.console.level', 'debug'

        // property 'mixin.env.remapRefMap', 'true'
        //property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        programArguments.addAll '--mod', 'oldguns', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        //arg "-mixin.config=oldguns.mixins.json"

        modSource sourceSets.main

//        mods {
//            oldguns {
//                source sourceSets.main
//            }
//        }
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // Patchouli and JEI
        url 'https://maven.blamejared.com'
    }
	maven { 
		url = "https://repo.spongepowered.org/repository/maven-public/" 
	}
	maven {
		url 'https://www.cursemaven.com'
		content {
			includeGroup "curse.maven"
		}
	}
	maven { url "https://maven.shedaniel.me" }
    mavenLocal()
}

// Taken and modified from https://github.com/BluSunrize/ImmersiveEngineering/
String buildVersionString() {
    String mod_output_version = "${mod_version}-${mod_buildnumber}"
	if (System.getenv("CI") == "true") {
        File changelog = new File("CHANGELOG.md")
        if (!changelog.exists()) {
            // Get the current minor/patch number and bump it
            int idx = mod_version.lastIndexOf(".")
            String major = mod_version.substring(0, idx)
            String minor = mod_version.substring(idx + 1)
            int bumped = minor.toInteger() + 1
            mod_output_version = "${major}.${bumped}-pre"
        } else {
            // If the changelog file is present, we use the first line from that
            String first_line = changelog.readLines().get(0)
            mod_output_version = first_line.substring(first_line.indexOf("-") + 1)
        }
        // Now use describe to get the number of commits since the last tag
        exec {
            commandLine 'git', 'fetch', '--force', '--tags'
        }
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--long', '--abbrev=8', 'HEAD'
            standardOutput = stdout
        }
        String descr = stdout.toString().trim()
        descr = descr.substring(0, descr.length() - 10)
        int idx = descr.lastIndexOf("-")
        int pre_version = descr.substring(idx + 1).toInteger()
		String commit_current = System.getenv("GIT_COMMIT")
		String commit_last = System.getenv("GIT_PREVIOUS_COMMIT")
        // If there have been more than 0 commits, consider this a pre-build
        // otherwise use normal versioning (so a Jenkins build on the tag is equal to a release)
		if (!commit_current.equals(commit_last)) {
            mod_output_version = "${mod_output_version}.${pre_version}"
		}
    }
    return "${mc_version}-${mod_output_version}"
}

dependencies {
    //minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    //minecraft "net.neoforged:neoforge:${neoforge_version}"
    implementation "net.neoforged:neoforge:${neoforge_version}"

    // JEI compile
	compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
	compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    //compileOnly fg.deobf("curse.maven:jei-238222:4471300")

    // Patchouli impl
    compileOnly "vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}:api"

    // Crafttweaker compile
    //compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${mc_version}:${crafttweaker_version}")
    //compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-1.18.2:${crafttweaker_version}")

    // JEI runtime
	//runtimeOnly "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
	//runtimeOnly "mezz.jei:jei-${mc_version}-common:${jei_version}"
    //runtimeOnly fg.deobf("curse.maven:jei-238222:4471300")

    // Patchouli runtime
    runtimeOnly "vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}"

    // Crafttweaker runtime
    //runtimeOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${mc_version}:${crafttweaker_version}")
    //compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-1.18.2:${crafttweaker_version}")

    // Architectury, Cloth, and REI runtime
	//runtimeOnly	fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
	//runtimeOnly	fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_version}")
	//runtimeOnly	fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
	//runtimeOnly	fg.deobf("me.shedaniel:RoughlyEnoughItems-plugin-compatibilities-forge:${rei_compat_version}")

	// Create runtime
	//runtimeOnly fg.deobf("curse.maven:create-328085:3600402")
	//runtimeOnly fg.deobf("curse.maven:flywheel-486392:3600401")

	// GuardVillagers runtime
	//runtimeOnly fg.deobf("curse.maven:guard-villagers-360203:3970122")

	//annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "oldgunsmod",
                "Specification-Vendor"    : "zach2039",
                "Specification-Version"   : "${mc_version}-${mod_version}", 
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion.get(),
                "Implementation-Vendor"   : "zach2039",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "oldguns.mixins.json"
        ])
    }
}

//jar.finalizedBy('reobfJar')

//mixin {
//    add sourceSets.main, "oldguns.refmap.json"
//	//config "oldguns.mixins.json"
//
//	//debug.verbose = true
//	//debug.export = true
//	//dumpTargetOnFailure = true
//}

