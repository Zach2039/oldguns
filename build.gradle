buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://maven.minecraftforge.net/" }
    }

    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+"
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
compileJava {
    sourceCompatibility = "8"
    targetCompatibility = "8"
}

version = buildVersionString()
group = "zach2039.oldguns" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${name}"

repositories {
    maven {
        url = "https://maven.minecraftforge.net/"
    }

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // Patchouli and JEI
        url 'https://maven.blamejared.com'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"

    // Crafttweaker stuff
    //compileOnly "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.8.468"

    compileOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")

    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    runs {
        "client" {
            workingDirectory file("./run")
            mods { "${project.name}" { source sourceSets.main } }
        }

        "server" {
            workingDirectory file("./run/server")
            mods { "${project.name}" { source sourceSets.main } }
        }
    }
}

def version_replaces = [
        'version'      : project.version,
        'mc_version'   : mc_version,
        'mod_version'  : mod_version,
        'forge_version': forge_version,
        'jei_version'  : jei_version
]

processResources {
    inputs.properties(version_replaces)

    filesMatching("mcmod.info") {
        expand version_replaces
    }
}

// Taken and modified from https://github.com/BluSunrize/ImmersiveEngineering/
String buildVersionString() {
    String mod_output_version = "${mod_version}-${mod_buildnumber}"
	if (System.getenv("CI") == "true") {
        File changelog = new File("CHANGELOG.md")
        if (!changelog.exists()) {
            // Get the current minor/patch number and bump it
            int idx = mod_version.lastIndexOf(".")
            String major = mod_version.substring(0, idx)
            String minor = mod_version.substring(idx + 1)
            int bumped = minor.toInteger() + 1
            mod_output_version = "${major}.${bumped}-pre"
        } else {
            // If the changelog file is present, we use the first line from that
            String first_line = changelog.readLines().get(0)
            mod_output_version = first_line.substring(first_line.indexOf("-") + 1)
        }
        // Now use describe to get the number of commits since the last tag
        exec {
            commandLine 'git', 'fetch', '--force', '--tags'
        }
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--long', '--abbrev=8', 'HEAD'
            standardOutput = stdout
        }
        String descr = stdout.toString().trim()
        descr = descr.substring(0, descr.length() - 10)
        int idx = descr.lastIndexOf("-")
        int pre_version = descr.substring(idx + 1).toInteger()
		String commit_current = System.getenv("GIT_COMMIT")
		String commit_last = System.getenv("GIT_PREVIOUS_COMMIT")
        // If there have been more than 0 commits, consider this a pre-build
        // otherwise use normal versioning (so a Jenkins build on the tag is equal to a release)
		if (!commit_current.equals(commit_last)) {
            mod_output_version = "${mod_output_version}.${pre_version}"
		}
    }
    return "${mc_version}-${mod_output_version}"
}

//When Forge 1.12 loads mods from a directory that's been put on the classpath, it expects to find resources in the same directory.
//Default Gradle behavior puts resources in ./build/resources/main instead of ./build/classes/main/java. Let's change that.
sourceSets.all { it.output.resourcesDir = it.output.classesDirs.getFiles().iterator().next() }