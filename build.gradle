buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://plugins.gradle.org/m2/'}
        maven {
			url = 'https://repo.spongepowered.org/repository/maven-public/'
			content { includeGroup "org.spongepowered" }
		}
        mavenLocal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath "com.diffplug.gradle:goomph:3.33.0"
		//classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT-temp'
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
//apply plugin: 'com.diffplug.eclipse.apt'

group = "com.zach2039.oldguns" 
archivesBaseName = "oldguns"
version = buildVersionString()

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
	//mappings channel: 'snapshot', version: "20201028-1.16.3"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
			arg "-mixin.config=oldguns.mixins.json"
            mods {
                oldguns {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
         	property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            
            arg '-nogui'
            arg "-mixin.config=oldguns.mixins.json"
            
            mods {
                oldguns {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
     		property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'oldguns', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			arg "-mixin.config=oldguns.mixins.json"
			
            mods {
                oldguns {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	mavenCentral()
	maven { // JEI & Tinkers
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
	maven { 
		url = "https://repo.spongepowered.org/repository/maven-public/" 
	}
    maven { // Mirror for JEI
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
	maven { // Patchouli
		url 'https://maven.blamejared.com' 
	}
}

// Taken and modified from https://github.com/BluSunrize/ImmersiveEngineering/
String buildVersionString() {
    String mod_output_version = "${mod_version}-${mod_buildnumber}"
    boolean jenkins_build = System.getenv("add_git_rev") != null
    if (jenkins_build) {
        File changelog = new File("CHANGELOG.md")
        if (!changelog.exists()) {
            // Get the current minor/patch number and bump it
            int idx = mod_version.lastIndexOf(".")
            String major = mod_version.substring(0, idx)
            String minor = mod_version.substring(idx + 1)
            int bumped = minor.toInteger() + 1
            mod_output_version = "${major}.${bumped}-pre"
        } else {
            // If the changelog file is present, we use the first line from that
            String first_line = changelog.readLines().get(0)
            mod_output_version = first_line.substring(first_line.indexOf("-") + 1)
        }
        // Now use describe to get the number of commits since the last tag
        exec {
            commandLine 'git', 'fetch', '--force', '--tags'
        }
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--long', '--abbrev=8', 'HEAD'
            standardOutput = stdout
        }
        String descr = stdout.toString().trim()
        descr = descr.substring(0, descr.length() - 10)
        int idx = descr.lastIndexOf("-")
        int pre_version = descr.substring(idx + 1).toInteger()
        // If there have been more than 0 commits, consider this a pre-build
        // otherwise use normal versioning (so a Jenkins build on the tag is equal to a release)
        if (pre_version > 0)
            mod_output_version = "${mod_output_version}.${pre_version}"
    }
    return "${mc_version}-${mod_output_version}"
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.20'
		
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-${patchouli_version}:api")

	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-${patchouli_version}")

	if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "oldgunsmod",
                "Specification-Vendor"    : "zach2039",
                "Specification-Version"   : "${mc_version}-${mod_version}", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion.get(),
                "Implementation-Vendor"   : "zach2039",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "oldguns.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, "oldguns.refmap.json"
}

eclipse {
    afterEvaluate {
        //synchronizationTasks createSrgToMcp, createMcpToSrg, mixinEclipseJdtApt, eclipseJdt, eclipseFactorypath
        synchronizationTasks createSrgToMcp, createMcpToSrg, eclipseJdt 
    }
}
